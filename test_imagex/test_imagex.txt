{meta: 'test : imagex', html: '<canvas id=DQTESmainCanvasDQTES width=DQTES1300DQTES height=DQTES440DQTES class=DQTESblock mt10DQTES>NLBRK</canvas>NLBRK<textarea id=DQTESinfoDQTES class=DQTESadaptive mono s14DQTES type=DQTEStextareaDQTES value=DQTES...DQTES>NLBRK</textarea>NLBRK<!--<img src=DQTEShttps://localhost:443/testImages/baloon.jpgDQTES>-->', js: 'import { makeRequest } from SQTEShttps://alikim.com/_v1_jsm/network.jsSQTESNLBRKNLBRKconst getHTML = () => {NLBRK   const html = {};NLBRK   document.querySelectorAll(SQTES*[id]SQTES).forEach(e => html[e.id] = e);NLBRK   return html;NLBRK};NLBRKNLBRKconst html = getHTML();NLBRK// 253,234,199,153,103,57,22,3NLBRKconst canv = html.mainCanvas;NLBRKconst ctx = canv.getContext(SQTES2dSQTES);NLBRKNLBRKconst zoom = 1; // image magnificationNLBRKconst gap = 0; // between magnified pixelsNLBRKconst space = 20; // between imagesNLBRKlet iw, ih, iData, iData2, iDataDf;NLBRKNLBRKconst drawPixel = (row, col, offX, offY, zoom, iData) => {NLBRK   const ind = 4 * (row * iw + col);NLBRK   const [r, g, b, a] = iData.slice(ind, ind + 4);NLBRK   ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a / 255})`;NLBRK   ctx.fillRect(NLBRK      offX + col * (zoom + gap),NLBRK      offY + row * (zoom + gap),NLBRK      zoom,NLBRK      zoom);NLBRK};NLBRKNLBRKconst getPixelInfo = (row, col, iData) => {NLBRK   const ind = 4 * (row * iw + col);NLBRK   const [r, g, b, a] =NLBRK      Array.from(iData.slice(ind, ind + 4)).map(ch => ch.toString(16).padStart(2, SQTES0SQTES));NLBRK   return `${r} ${g} ${b} ${a}`;NLBRK};NLBRKNLBRKconst drawZoomedImg = (offX, offY, iData) => {NLBRK   const len = iData.length / 4;NLBRK   for (let i = 0; i < len; i++) {NLBRK      const col = i % iw;NLBRK      const row = Math.floor(i / iw);NLBRK      drawPixel(row, col, offX, offY, zoom, iData);NLBRK   }NLBRK};NLBRKNLBRKconst readInt32BigEndian = (byteArr, off) => NLBRK   (byteArr[off] << 24) |NLBRK   (byteArr[off + 1] << 16) |NLBRK   (byteArr[off + 2] << 8) |NLBRK    byteArr[off + 3];NLBRKNLBRKconst clamp = (val, a, b) => val;// Math.max(a, Math.min(val, b));NLBRKNLBRKconst serialiseToRGBA = (fData, iw, ih) => {NLBRK   const numChan = 4;//fData[8];NLBRK   const bitDepth = 8;//fData[9];NLBRK   const bitsPerPixel = numChan * bitDepth;NLBRKNLBRK   const serData = new Uint8ClampedArray(iw * ih * 4);NLBRKNLBRK   const pixData = fData.subarray(8); NLBRK   NLBRK   if (bitDepth == 8) { console.log(numChan, iw, ih, fData.length);NLBRK      if (numChan == 40) {NLBRK         serData.set(pixData);NLBRK      }NLBRK      else if (numChan == 4) {NLBRK         let cnt = 0;NLBRK         for (let i = 0; i < pixData.length; i += numChan) {NLBRK            const Y = pixData[i];NLBRK            const Cb =  pixData[i + 1];NLBRK            const Cr = pixData[i + 2];NLBRK            serData[cnt] = clamp(Y + 1.402 * Cr + 128, 0, 255);NLBRK            serData[cnt + 1] = clamp(Y - 0.344 * Cb - 0.714 * Cr + 128, 0, 255);NLBRK            serData[cnt + 2] = clamp(Y + 1.772 * Cb + 128, 0, 255);NLBRK            serData[cnt + 3] = 255;NLBRK            cnt += 4;NLBRK         }NLBRK      }NLBRK   }NLBRKNLBRK   return serData;NLBRKNLBRK   //var scanlineBitLen = bitsPerPixel * hdrCh.width;NLBRK   //var wholeBytes = scanlineBitLen / 8;NLBRK   //int scanlineBytelen = scanlineBitLen % 8 == 0 ? wholeBytes : wholeBytes + 1;NLBRK};NLBRKNLBRKconst onload = (imgSrc, _fdat) => {NLBRKNLBRK   ctx.clearRect(0, 0, canv.width, canv.height);NLBRKNLBRK   iw = imgSrc.width;NLBRK   ih = imgSrc.height;NLBRK   ctx.drawImage(imgSrc, 0, 0);NLBRK   const canvData = ctx.getImageData(0, 0, iw, ih);NLBRK   iData = canvData.data;NLBRKNLBRK   console.log(`width: ${iw}, height: ${ih}`);NLBRKNLBRK   let iOffX = iw + space;NLBRK   let iOffY = 0;NLBRK   drawZoomedImg(iOffX, iOffY, iData);NLBRKNLBRK   const ufData = new Uint8Array(_fdat, 0, 8);NLBRKNLBRK   iw = readInt32BigEndian(ufData, 0);NLBRK   ih = readInt32BigEndian(ufData, 4);  console.log(iw, ih)NLBRKNLBRK   const fData = new Int8Array(_fdat, 8); console.log(fData);NLBRK   iData2 = serialiseToRGBA(fData, iw, ih);NLBRKNLBRK   const iwZoomed = iw * (zoom + gap);NLBRK   const ihZoomed = ih * (zoom + gap);NLBRK   iOffX += iwZoomed + space;NLBRK   drawZoomedImg(iOffX, iOffY, iData2);NLBRKNLBRK   const iDataPix = new Int32Array(iData.buffer);NLBRK   const iDataPix2 = new Int32Array(iData2.buffer);NLBRKNLBRK   iDataDf = new Uint8ClampedArray(iData.length);NLBRKNLBRK   for (let i = 0; i < iDataPix.length; i++) {NLBRK      const r = 4 * i;NLBRK      const a = r + 3;NLBRK      iDataDf[r] = iDataPix[i] == iDataPix2[i] ? 48 : 255;NLBRK      iDataDf[a] = 255;NLBRK   }NLBRKNLBRK   iOffX += iwZoomed + space;NLBRK   drawZoomedImg(iOffX, iOffY, iDataDf);NLBRKNLBRK   const info = document.getElementById(SQTESinfoSQTES);NLBRKNLBRK   canv.addEventListener(SQTESclickSQTES, evt => {NLBRK      const [x, y] = [evt.clientX, evt.clientY];NLBRK      const cRect = canv.getBoundingClientRect();NLBRK      const dfLeft = cRect.left + iOffX;NLBRK      const dfTop = cRect.top + iOffY;NLBRK      const dfRight = dfLeft + iwZoomed;NLBRK      const dfBottom = dfTop + ihZoomed;NLBRKNLBRK      if (x < dfLeft || x > dfRight || y < dfTop || y > dfBottom) return;NLBRKNLBRK      const [cX, cY] = [NLBRK         evt.clientX - cRect.x,NLBRK         evt.clientY - cRect.y];NLBRK      const col = Math.floor((cX - iOffX) / (zoom + gap));NLBRK      const row = Math.floor((cY - iOffY) / (zoom + gap));NLBRK      const iDataPixInf = getPixelInfo(row, col, iData);NLBRK      const iDataPixInf2 = getPixelInfo(row, col, iData2);NLBRK      info.value =NLBRK         `row: ${row}, col: ${col}\n\n${iDataPixInf}\n${iDataPixInf2}`;NLBRK   });NLBRK};NLBRKNLBRKconst fpath = SQTEShttps://localhost:443/testImages/q_50.jpgSQTES;NLBRKconst dpath = fpath + SQTES.rgbaSQTES;NLBRKNLBRKconst promImgSrc = new Promise(res => {NLBRK  const img = new Image();NLBRK  img.crossOrigin = DQTESanonymousDQTES;NLBRK  img.onload = () => { res(img) };NLBRK  img.src = fpath;NLBRK  console.log(`Loading image SQTES${fpath}SQTES...`);NLBRK});NLBRKNLBRKconst promFdat = makeRequest(dpath, SQTESSQTES, SQTESGETSQTES, 0, null, SQTESSQTES, SQTESarraybufferSQTES);NLBRKconsole.log(`Loading image SQTES${dpath}SQTES...`);NLBRKNLBRKPromise.all([promImgSrc, promFdat])NLBRK  .then(results => {NLBRK    const imgSrc = results[0];NLBRKNLBRK    const _fdat = results[1].data;NLBRKNLBRK    onload(imgSrc, _fdat);NLBRK    console.log(SQTESdoneSQTES);NLBRK  })NLBRK  .catch(error => {NLBRK    console.error(error);NLBRK  });NLBRKNLBRKconst Uint8ArrToStr = (fdat, base = 16, sep = SQTES SQTES) => {NLBRK  const arr = new Array(3); NLBRK  fdat.forEach((e, i) => { NLBRK    arr[i] = e.toString(base).padStart(2, SQTES0SQTES) NLBRK  });NLBRK  NLBRK  return arr.join(sep);NLBRK};NLBRK', css: '* {NLBRK  margin: 0px;NLBRK  padding: 0px;NLBRK  box-sizing: border-box;NLBRK  -webkit-user-select: none;NLBRK  -moz-user-select: none;NLBRK  -ms-user-select: none;NLBRK  user-select: none;NLBRK}NLBRKNLBRKbutton {NLBRK  border: 1px solid #1f5169;NLBRK  background-color: rgba(255, 255, 255, 0.1);NLBRK  color: #ccc;NLBRK  padding: 3px 8px 6px 8px;NLBRK}NLBRKNLBRKbutton:hover {NLBRK  cursor: pointer;NLBRK  color: #fff;NLBRK  background-color: #0099aa;NLBRK}NLBRKNLBRKbutton.mini {NLBRK  padding: 0px 8px 2px 8px;NLBRK}NLBRKNLBRKbutton.mini-x {NLBRK  font-size: 12px;NLBRK  padding: 2px 4px 1px 4px;NLBRK}NLBRKNLBRKbutton.mini-xc {NLBRK  font-size: 12px;NLBRK  padding: 2px 4px 2px 4px;NLBRK  border: none;NLBRK  border-radius: 3px;NLBRK}NLBRKNLBRKtextarea {NLBRK  border: 1px solid #1f5169;NLBRK  background-color: #0d1926;NLBRK  color: #91d6db;NLBRK  box-sizing: border-box;NLBRK  padding: 5px;NLBRK  resize: both;NLBRK  -moz-tab-size: 2;NLBRK  tab-size: 2;NLBRK  user-select: auto;NLBRK}NLBRKNLBRKselect,NLBRKinput:not([type=DQTEScheckboxDQTES]) {NLBRK  appearance: none;NLBRK  -moz-appearance: none;NLBRK  -webkit-appearance: none;NLBRK  border: 1px solid #1f5169;NLBRK  background-color: #183048;NLBRK  color: #00ddee;NLBRK  padding-top: 5px;NLBRK}NLBRKNLBRKselect {NLBRK  background-image: url(SQTES./arr.pngSQTES);NLBRK  background-repeat: no-repeat;NLBRK  background-position-x: 100%;NLBRK  background-position-y: center;NLBRK  cursor: pointer;NLBRK  padding: 1px 20px 1px 3px;NLBRK}NLBRKNLBRKinput[type=DQTEStextDQTES] {NLBRK  padding: 1px 0px 2px 4px;NLBRK}NLBRKNLBRKinput[type=DQTEScheckboxDQTES] {NLBRK  appearance: none;NLBRK  -moz-appearance: none;NLBRK  -webkit-appearance: none;NLBRK}NLBRKNLBRKinput[type=DQTEScheckboxDQTES]:after {NLBRK  position: relative;NLBRK  display: block;NLBRK  width: 7px;NLBRK  height: 7px;NLBRK  background-repeat: no-repeat;NLBRK  background-position: center;NLBRK  content: DQTESDQTES;NLBRK  border: 1px solid #296c87;NLBRK  margin-right: 5px;NLBRK  cursor: pointer;NLBRK}NLBRKNLBRKinput[type=DQTEScheckboxDQTES]:checked:after {NLBRK  background-color: #00ddee;NLBRK}NLBRKNLBRKinput[type=DQTEScheckboxDQTES]+span {NLBRK  margin-right: 8px;NLBRK  cursor: pointer;NLBRK}NLBRKNLBRK::placeholder {NLBRK  color: #00ddee;NLBRK  opacity: 0.4;NLBRK}NLBRKNLBRK::-ms-input-placeholder {NLBRK  color: #00ddee;NLBRK  opacity: 0.4;NLBRK}NLBRKNLBRKtextarea:focus,NLBRKinput:focus,NLBRKselect:focus {NLBRK  outline: none;NLBRK}NLBRKNLBRK@font-face {NLBRK  font-family: SQTESUbuntu MonoSQTES;NLBRK  font-style: normal;NLBRK  font-weight: 400;NLBRK  font-display: swap;NLBRK  src: url(./ubuntuMono.woff2) format(SQTESwoff2SQTES);NLBRK  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;NLBRK}NLBRKNLBRK.mono {NLBRK  font-family: DQTESUbuntu MonoDQTES, Consolas, DQTESLucida ConsoleDQTES, DQTESCourier NewDQTES, DQTESSF MonoDQTES, Monaco, monospace;NLBRK}NLBRKNLBRK.s12 {NLBRK  font-size: 12px;NLBRK}NLBRKNLBRK.s14 {NLBRK  font-size: 14px;NLBRK}NLBRKNLBRK.clean_scroll {NLBRK  overflow: scroll;NLBRK}NLBRKNLBRK.noscroll {NLBRK  overflow: hidden;NLBRK}NLBRKNLBRK.clean_scroll,NLBRK.noscroll {NLBRK  -ms-overflow-style: none;NLBRK  scrollbar-width: none;NLBRK}NLBRKNLBRK.clean_scroll::-webkit-scrollbar,NLBRK.noscroll::-webkit-scrollbar {NLBRK  display: none;NLBRK}NLBRKNLBRK.noselect {NLBRK  -webkit-user-select: none;NLBRK  -moz-user-select: none;NLBRK  -ms-user-select: none;NLBRK  user-select: none;NLBRK}NLBRKNLBRK.nowrap {NLBRK  white-space: nowrap;NLBRK}NLBRKNLBRK.hcenter {NLBRK  display: flex;NLBRK  justify-content: center;NLBRK}NLBRKNLBRK.vcenter {NLBRK  display: flex;NLBRK  align-items: center;NLBRK}NLBRKNLBRK.fwrap {NLBRK  flex-wrap: wrap;NLBRK}NLBRKNLBRK.center {NLBRK  display: flex;NLBRK  align-items: center;NLBRK  justify-content: center;NLBRK}NLBRKNLBRK.vcjust {NLBRK  display: flex;NLBRK  align-items: center;NLBRK  justify-content: space-between;NLBRK}NLBRKNLBRK.vtop {NLBRK  vertical-align: top;NLBRK}NLBRKNLBRK.controls {NLBRK  display: flex;NLBRK  align-items: flex-start;NLBRK}NLBRKNLBRK.none {NLBRK  display: none;NLBRK}NLBRKNLBRK.block {NLBRK  display: block;NLBRK}NLBRKNLBRK.shrink {NLBRK  display: inline-block;NLBRK}NLBRKNLBRK.hide {NLBRK  visibility: hidden;NLBRK}NLBRKNLBRK.opa50 {NLBRK  opacity: 0.5;NLBRK}NLBRKNLBRK.nomouse {NLBRK  pointer-events: none;NLBRK}NLBRKNLBRK.nocursor {NLBRK   cursor: none;NLBRK   pointer-events: none;NLBRK}NLBRKNLBRK.mt5 {NLBRK  margin-top: 5px;NLBRK}NLBRKNLBRK.mt10 {NLBRK  margin-top: 10px;NLBRK}NLBRKNLBRK.mt15 {NLBRK  margin-top: 15px;NLBRK}NLBRKNLBRK.mt20 {NLBRK  margin-top: 20px;NLBRK}NLBRKNLBRK.ml5 {NLBRK  margin-left: 5px;NLBRK}NLBRKNLBRK.ml10 {NLBRK  margin-left: 10px;NLBRK}NLBRKNLBRK.ml15 {NLBRK  margin-left: 15px;NLBRK}NLBRKNLBRK.ml20 {NLBRK  margin-left: 20px;NLBRK}NLBRKNLBRK.ml40 {NLBRK  margin-left: 40px;NLBRK}NLBRKNLBRK.w1em {NLBRK  width: 1em;NLBRK}NLBRKNLBRK.w20 {NLBRK  width: 20px;NLBRK   min-width: 20px;NLBRK}NLBRKNLBRK.w30 {NLBRK  width: 30px;NLBRK   min-width: 30px;NLBRK}NLBRKNLBRK.w40 {NLBRK  width: 40px;NLBRK   min-width: 40px;NLBRK}NLBRKNLBRK.w50 {NLBRK  width: 50px;NLBRK   min-width: 50px;NLBRK}NLBRKNLBRK.w60 {NLBRK  width: 60px;NLBRK   min-width: 60px;NLBRK}NLBRKNLBRK.w70 {NLBRK  width: 70px;NLBRK   min-width: 70px;NLBRK}NLBRKNLBRK.w80 {NLBRK  width: 80px;NLBRK   min-width: 80px;NLBRK}NLBRKNLBRK.w100 {NLBRK  width: 100px;NLBRK   min-width: 100px;NLBRK}NLBRKNLBRK.w110 {NLBRK  width: 110px;NLBRK   min-width: 110px;NLBRK}NLBRKNLBRK.w120 {NLBRK  width: 120px;NLBRK   min-width: 120px;NLBRK}NLBRKNLBRK.w150 {NLBRK  width: 150px;NLBRK   min-width: 150px;NLBRK}NLBRKNLBRKtextarea.cscroll {NLBRK  border-radius: 5px;NLBRK}NLBRKNLBRK.cscroll::-webkit-scrollbar {NLBRK  width: 10px;NLBRK  height: 10px;NLBRK}NLBRKNLBRK.cscroll::-webkit-scrollbar-track {NLBRK  background: rgba(0, 0, 0, 0.5);NLBRK}NLBRKNLBRK.cscroll::-webkit-scrollbar-thumb {NLBRK  border-radius: 3px;NLBRK  background: rgba(255, 255, 255, 0.2);NLBRK}NLBRKNLBRK.cscroll::-webkit-scrollbar-thumb:hover {NLBRK  background: rgba(255, 255, 255, 0.3);NLBRK}NLBRKNLBRK.green {NLBRK  color: #22aa22;NLBRK}NLBRKNLBRK.red {NLBRK  color: #ff3333;NLBRK}NLBRKNLBRK.elog {NLBRK  color: #ff3333;NLBRK  border: none;NLBRK  border-left: solid 2px #ff3333;NLBRK  background: none;NLBRK  resize: none;NLBRK}NLBRKNLBRK.elog_ok {NLBRK  color: #22aa22;NLBRK  border: none;NLBRK  border-left: solid 2px #22aa22;NLBRK  background: none;NLBRK  resize: none;NLBRK}NLBRKNLBRK@keyframes flash_green {NLBRK  from {NLBRK    border-color: #22aa22;NLBRK  }NLBRK  to {NLBRK    border-color: #1f5169;NLBRK  }NLBRK}NLBRKNLBRK.flash_green {NLBRK  animation-name: flash_green;NLBRK  animation-duration: 2s;NLBRK}NLBRKNLBRK@keyframes flash_red {NLBRK  from {NLBRK    border-color: #ff3333;NLBRK  }NLBRK  to {NLBRK    border-color: #1f5169;NLBRK  }NLBRK}NLBRKNLBRK.flash_red {NLBRK  animation-name: flash_red;NLBRK  animation-duration: 2s;NLBRK}NLBRKNLBRK#hint {NLBRK  position: fixed;NLBRK  top: 0px;NLBRK  left: 0px;NLBRK  max-width: 200px;NLBRK  margin: 20px 10px 10px 20px;NLBRK  padding: 10px;NLBRK  border-radius: 5px;NLBRK  border: solid 1px rgba(255, 255, 255, 0.25);NLBRK  background: rgba(34, 51, 68, 0.66);NLBRK  color: #cccccc;NLBRK  white-space: pre-wrap;NLBRK  /* offset-x | offset-y | blur-radius | spread-radius | color */NLBRK  box-shadow: 0px 0px 4px 2px rgba(0, 0, 0, 0.2);NLBRK}NLBRKNLBRK.slider {NLBRK  width: calc(100% - 20px);NLBRK  height: 25px;NLBRK  background: rgb(0, 0, 0, 0.55);NLBRK  box-sizing: content-box;NLBRK  position: relative;NLBRK  cursor: pointer;NLBRK}NLBRKNLBRK.slider2 {NLBRK  width: 100%;NLBRK  height: 25px;NLBRK  background: rgb(0, 0, 0, 0.25);NLBRK  box-sizing: content-box;NLBRK  position: relative;NLBRK  cursor: pointer;NLBRK}NLBRKNLBRK.track {NLBRK  left: 14px;NLBRK  top: calc(50% - 1px);NLBRK  width: calc(100% - 28px);NLBRK  height: 1px;NLBRK  background-color: #296c87;NLBRK  position: absolute;NLBRK}NLBRKNLBRK.knob {NLBRK  width: 19px;NLBRK  height: 19px;NLBRK  margin: 0px 5px 0px 5px;NLBRK  position: absolute;NLBRK  top: 0px;NLBRK  left: 0px;NLBRK  background-image: radial-gradient(circle at center, #00ddee 0%, #00ddee 30%, transparent 40%);NLBRK}NLBRKNLBRK.border_ext {NLBRK  border-left: solid 1px rgba(255, 255, 255, 0.2);NLBRK  border-top: solid 1px rgba(255, 255, 255, 0.2);NLBRK  border-right: solid 1px rgba(0, 0, 0, 0.33);NLBRK  border-bottom: solid 1px rgba(0, 0, 0, 0.33);NLBRK}NLBRKNLBRK.border_int {NLBRK  border-right: solid 1px rgba(255, 255, 255, 0.2);NLBRK  border-bottom: solid 1px rgba(255, 255, 255, 0.2);NLBRK  border-top: solid 1px rgba(0, 0, 0, 0.33);NLBRK  border-left: solid 1px rgba(0, 0, 0, 0.33);NLBRK}NLBRKNLBRKinput.clear {NLBRK   color: #ccc;NLBRK   border: none;NLBRK   background: none;NLBRK   padding-left: 0px;NLBRK}NLBRKbody {NLBRK   margin: 10px;NLBRK   background-color: #112233;NLBRK   color: #999;NLBRK}NLBRKNLBRKbody {NLBRK   font-family: DQTESUbuntu MonoDQTES, Consolas, DQTESLucida ConsoleDQTES, DQTESCourier NewDQTES, DQTESSF MonoDQTES, Monaco, monospace;NLBRK   font-size: 12px;NLBRK}NLBRKNLBRK@media (prefers-color-scheme: light) {NLBRK   body.adaptive {NLBRK      background-color: #ccddee;NLBRK      color: #333;NLBRK   }NLBRK   input.adaptive, textarea.adaptive {NLBRK      background-color: #c1d3e5;NLBRK      color: #064b50;NLBRK   }NLBRK }NLBRKNLBRK#mainCanvas {NLBRK   border: solid 1px #800000;NLBRK}NLBRKNLBRKtextarea {NLBRK   margin-top: 10px;NLBRK   background: #112233;NLBRK   border: solid 1px #800000;NLBRK   padding: 5px;NLBRK   color: #999;NLBRK}NLBRKNLBRK#info {NLBRK   width: 500px;NLBRK   height: 120px;NLBRK}'}